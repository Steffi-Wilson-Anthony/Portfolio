/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: BlurryGames (https://sketchfab.com/BlurryGames)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/some-robot-90d48868f86b45ba8e71ce6eb6abf216
Title: Some Robot
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import scene from '../assets/3d/some_robot.glb'
import {a} from '@react-spring/three';
import {useFrame, useThree} from '@react-three/fiber';

const Somerobot = ({isRotating, setIsRotating, robotAnimation, ...props}) => {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(scene);
  const { actions } = useAnimations(animations, group);
  const {gl, viewport} = useThree();

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches
    ? e.touches[0].clientX
    : e.clientX;

    lastX.current = clientX;
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if(isRotating){
      const clientX = e.touches
      ? e.touches[0].clientX
      : e.clientX;

      const delta = clientX - lastX.current / viewport.width;

      group.current.rotation.y += delta * 0.00002 * Math.PI;

      lastX.current = clientX

      rotationSpeed.current = delta * 0.00002 * Math.PI;
    }
  }

  useFrame(() => {

    if(!isRotating){
      rotationSpeed.current *= dampingFactor;
      
      if(Math.abs(rotationSpeed.current) < 0.001){
        rotationSpeed.current = 0;
      }

      group.current.rotation.y += rotationSpeed.current;
    }

      else{
        const rotation = group.current.rotation.y;
  
        const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
  
        // Set the current stage based on the island's orientation
        switch (true) {
          case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
            break;
          case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
            break;
          case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
            break;
          case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
            break;
          default:
        }
      }
  })

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointermove', handlePointerMove);

    return () => {
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointermove', handlePointerMove);
    }
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove])

  useEffect(() => {
    if(actions[robotAnimation]){
      actions[robotAnimation].play();
    }
  }, [actions, robotAnimation]);

  return (
    <a.group ref={group} {...props} dispose={null}>
      <a.group name="Sketchfab_Scene">
        <a.group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={0.333}>
          <a.group
            name="b1edbec032b546009340e08dd417f731fbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}>
            <a.group name="Object_2">
              <a.group name="RootNode">
                <a.group name="Plane" rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                <a.group name="rig" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                  <a.group name="Object_6">
                    <primitive object={nodes._rootJoint} />
                    <skinnedMesh
                      name="Object_9"
                      geometry={nodes.Object_9.geometry}
                      material={materials.ArmorOut}
                      skeleton={nodes.Object_9.skeleton}
                    />
                    <skinnedMesh
                      name="Object_10"
                      geometry={nodes.Object_10.geometry}
                      material={materials.Body}
                      skeleton={nodes.Object_10.skeleton}
                    />
                    <skinnedMesh
                      name="Object_11"
                      geometry={nodes.Object_11.geometry}
                      material={materials.ArmorIn}
                      skeleton={nodes.Object_11.skeleton}
                    />
                    <skinnedMesh
                      name="Object_12"
                      geometry={nodes.Object_12.geometry}
                      material={materials.Decor}
                      skeleton={nodes.Object_12.skeleton}
                    />
                    <skinnedMesh
                      name="Object_13"
                      geometry={nodes.Object_13.geometry}
                      material={materials.Lights}
                      skeleton={nodes.Object_13.skeleton}
                    />
                    <a.group name="Object_8" rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                  </a.group>
                </a.group>
              </a.group>
            </a.group>
          </a.group>
        </a.group>
      </a.group>
    </a.group>
  )
}

export default Somerobot;