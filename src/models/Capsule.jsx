/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Xavi Pujadas (https://sketchfab.com/XaviPujadas)
License: CC-BY-NC-ND-4.0 (http://creativecommons.org/licenses/by-nc-nd/4.0/)
Source: https://sketchfab.com/3d-models/sci-fi-capsule-25a6c93f3c9148e8931c36421b6a6eb7
Title: Sci-Fi Capsule
*/

import React, { useEffect, useRef } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import capsuleScene from '../assets/3d/capsule.glb';
import {a} from '@react-spring/three';
import { useFrame, useThree } from '@react-three/fiber';

const Capsule = ({isRotating, setIsRotating, capsuleAnimation, ...props}) => {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF(capsuleScene);
  const { actions } = useAnimations(animations, group);
  const {gl, viewport} = useThree();

  const lastX = useRef(0);
  const rotationSpeed =useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches 
    ? e.touches[0].clientX 
    : e.clientX;

    lastX.current = clientX;
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if(isRotating){
      const clientX = e.touches 
    ? e.touches[0].clientX 
    : e.clientX;

    const delta = clientX - lastX.current / viewport.width;

    group.current.rotation.y += delta * 0.00002 * Math.PI;

    lastX.current = clientX;

    rotationSpeed.current = delta * 0.00002 * Math.PI;
    }
  }

  useFrame(() => {
    if(!isRotating){
      rotationSpeed.current *= dampingFactor;
      
      if(Math.abs(rotationSpeed.current) < 0.001){
        rotationSpeed.current = 0;
      }

      group.current.rotation.y += rotationSpeed.current;
    }

    else{
      const rotation = group.current.rotation.y;

      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          break;
        default:
      }
    }
  })

  useEffect(() =>{
    const canvas = gl.domElement;
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointermove', handlePointerMove);

    return () => {
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointermove', handlePointerMove);
    }

  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove])

    useEffect(() => {
      if(actions[capsuleAnimation]){
        actions[capsuleAnimation].play();
      }
    }, [actions, capsuleAnimation])

  return (
    <a.group ref={group} {...props} dispose={null}>
      <a.group name="Sketchfab_Scene">
        <a.group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <a.group name="5d84de3b1e2344979827648a3541ba5cfbx" rotation={[Math.PI / 2, 0, 0]}>
            <a.group name="Object_2">
              <a.group name="RootNode">
                <a.group name="Object_4">
                  <primitive object={nodes._rootJoint} />
                  <skinnedMesh
                    name="Object_7"
                    geometry={nodes.Object_7.geometry}
                    material={materials.Supports}
                    skeleton={nodes.Object_7.skeleton}
                    morphTargetDictionary={nodes.Object_7.morphTargetDictionary}
                    morphTargetInfluences={nodes.Object_7.morphTargetInfluences}
                  />
                  <a.group name="Object_6" rotation={[-Math.PI / 2, 0, 0]} />
                  <a.group name="Capsula" rotation={[-Math.PI / 2, 0, 0]}>
                    <mesh
                      name="0"
                      castShadow
                      receiveShadow
                      geometry={nodes['0'].geometry}
                      material={materials.Capsule}
                      morphTargetDictionary={nodes['0'].morphTargetDictionary}
                      morphTargetInfluences={nodes['0'].morphTargetInfluences}
                    />
                  </a.group>
                  <a.group
                    name="Plane009"
                    position={[7.68, 61.304, 101.784]}
                    rotation={[-1.134, 0, 0]}>
                    <mesh
                      name="Plane009_Hologram_2_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.Plane009_Hologram_2_0.geometry}
                      material={materials.Hologram_2}
                    />
                  </a.group>
                  <a.group
                    name="Plane010"
                    position={[0, 77.408, 94.16]}
                    rotation={[-Math.PI / 9, 0, 0]}>
                    <mesh
                      name="Plane010_Hologram_1_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.Plane010_Hologram_1_0.geometry}
                      material={materials.Hologram_1}
                    />
                  </a.group>
                  <a.group name="Plane011" position={[0, 116.676, 79.437]}>
                    <mesh
                      name="Plane011_Hologram_3_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.Plane011_Hologram_3_0.geometry}
                      material={materials.Hologram_3}
                    />
                  </a.group>
                  <a.group name="Soporte" rotation={[-Math.PI / 2, 0, 0]} />
                  <a.group name="Vidrio" rotation={[-Math.PI / 2, 0, 0]}>
                    <mesh
                      name="2"
                      castShadow
                      receiveShadow
                      geometry={nodes['2'].geometry}
                      material={materials.Glass}
                      morphTargetDictionary={nodes['2'].morphTargetDictionary}
                      morphTargetInfluences={nodes['2'].morphTargetInfluences}
                    />
                  </a.group>
                  <a.group name="Object022" rotation={[-Math.PI / 2, 0, 0]}>
                    <mesh
                      name="Object022_Halo_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.Object022_Halo_0.geometry}
                      material={materials.Halo}
                    />
                  </a.group>
                </a.group>
              </a.group>
            </a.group>
          </a.group>
        </a.group>
      </a.group>
    </a.group>
  )
}

export default Capsule;